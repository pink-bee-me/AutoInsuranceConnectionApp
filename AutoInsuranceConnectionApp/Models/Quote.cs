//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoInsuranceConnectionApp.Models
{
    models.InsuranceEntities.Models
    using System;

    public partial class Quote
    {
        public int QuoteId { get; set; }
        public int InsureeId { get; set; }
        public decimal BaseRate { get; set; }
        public decimal AgeUnder18 { get; set; }
        public decimal Age19to25 { get; set; }
        public decimal Age26AndUp { get; set; }
        public decimal AutoYearPrior2000 { get; set; }
        public decimal AutoYearAfter2015 { get; set; }
        public decimal IsPorsche { get; set; }
        public decimal IsCarerra911 { get; set; }
        public decimal SpeedingTicket { get; set; }
        public decimal SubTotalBeforeDUICalc { get; set; }
        public decimal DUIRateUP25Percent { get; set; }
        public decimal SubTotalAfterDUICalc { get; set; }
        public decimal FullCovRateUP50Percent { get; set; }
        public decimal SubTotalAfterFullCovCalc { get; set; }
        public decimal QuoteInsCostPerMonth { get; set; }
        public decimal QuoteInsCostPerYear { get; set; }

        public virtual Insuree Insuree { get; set; }

        public Quote(Insuree Insuree)
        {
            Insuree.Id = InsureeId;
        }


        public void CalculateAge(Insuree DateOfBirth)
        {

            var years = DateTime.Now.Year - Insuree.DateOfBirth.Year;
            var age = years;

            if (Insuree.DateOfBirth.Month > DateTime.Now.Month || Insuree.DateOfBirth.Month == DateTime.Now.Month && Insuree.DateOfBirth.Day > DateTime.Now.Day)
                years--;
            {

                var under18 = (age < 18) ? 100.00 : 0.00;
                var btw19and25 = ((age > 18) && (age <= 25)) ? 50.00 : 0.00;
                var over25 = (age > 25) ? 25.00 : 0.00;


            }


            public void CalculateAutoYear(Insuree Insuree)
            {
                var autoYearPrior2000 = (Insuree.CarYear < 2000) ? 25.00 : 0.00;
                var autoYearAfter2015 = (Insuree.CarYear > 2015) ? 25.00 : 0.00;
            }


            public void CalculateAutoMakeAndModel(Insuree Insuree)
            {
                var yesIsPorsche = (Insuree.CarMake == "Porsche") ? 25.00 : 0.00;
                var yesIsCarrera = (Insuree.CarModel == "Carrera") ? 25.00 : 0.00;

            }

            public void CalculateSpeedingTickets(Insuree Insuree)
            {
                var speedingTickets = Insuree.SpeedingTickets;
                var speedingTicketsRate = speedingTickets * 10.00;

            }

            public void SubTotalWithoutDUI(Insuree Insuree, double ageUnder18, double btw19To25,
                                           double age26AndUp, double autoYearPrior2000, double autoYearAfter2015,
                                           double yesIsPorsche, double yesIsCarrera, double speedingTicketsRate)
            {
                var baseRate = 50.00;

                var subtotalBeforeDUI = baseRate + ageUnder18 + btw19To25 + age26AndUp +
                                        autoYearPrior2000 + autoYearAfter2015 + yesIsPorsche +
                                        yesIsCarrera + speedingTicketsRate;

            }


            public void CalculateDUI(Insuree Insuree, double subtotalBeforeDUI)
            {
                var isTrueDUI = (Insuree.DUI == true) ? 1 : 0;
                var duiRate = subtotalBeforeDUI * 0.25;//Calculating the rate of increase if DUI is true
                var yesDUI = (isTrueDUI == 1) ? duiRate : 0.00;// value that will be placed in Quote DUIRateUP25Percent
                var subtotalAfterDUI = yesDUI + subtotalBeforeDUI;// value that will be placed in Quote SubTotalAfterDUICalc


            }


            public void CalculateCoverageType(double subtotalAfterDUI, Insuree CoverageType)
            {
                var coverageTypeFull = (Insuree.CoverageType == true) ? 1 : 0;
                var fullCoverageRate = subtotalAfterDUI * 0.50;// calculating the rate of increase if FullCoverage is true
                var yesFullCoverage = (coverageTypeFull == 1) ? fullCoverageRate : 0.00;//value that will be placed in FullCovRateUP50Percent  
                var subtotalAfterCoverageType = subtotalAfterDUI + yesFullCoverage;
            }

            public void CalculateQuote(double subtotalAfterCoverageType)
            {
                var monthlyQuote = subtotalAfterCoverageType;
                var yearlyQuote = subtotalAfterCoverageType * 12;

            }
        }
    }